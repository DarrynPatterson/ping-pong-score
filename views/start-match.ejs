<% include ./partials/secure-nav %>

<div class="container">
    <h1 class="mt-4 text-dark text-center">Select Players</h1>
    <br />
    <form action="/start-match" method="POST">
        <div class="row">
            <div class="col-sm-6">
                <div class="card bg-light mb-3">
                    <div class="card-body">
                        <h4 class="card-title">Player A</h4>
                        <select id="player1Select" class="info__select">
                            <option class="instruction" selected="selected">Select a player</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="card bg-light mb-3">
                    <div class="card-body">
                        <h4 class="card-title">Player B</h4>
                        <select id="player2Select" class="info__select">
                            <option class="instruction" selected="selected">Select a player</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" id="player1Id" name="player1Id" value="">
        <input type="hidden" id="player2Id" name="player2Id" value="">
        <button type="button" id="startMatchButton" class="btn btn-success btn-lg btn-block disabled">Start Match!</button>
    </form>
</div>
<script>
    $(() => {
        // Initialize slim select components
        new SlimSelect({ select: "#player1Select" });
        new SlimSelect({ select: "#player2Select" });

        const player1Select = $("#player1Select");
        const player2Select = $("#player2Select");
        
        // Remove instruction when an option is selected
        player1Select.change((event) => {
            const selectedKey = $(event.target).children(":selected").attr("key");
            $("#player1Id").attr("value", selectedKey);
            player1Select.find(".instruction").remove();
            tryEnableMatchButton();
        });
        player2Select.change(() => {
            const selectedKey = $(event.target).children(":selected").attr("key");
            $("#player2Id").attr("value", selectedKey);
            player2Select.find(".instruction").remove();
            tryEnableMatchButton();
        });
        
        // Get all players
        $.ajax('/api/users').then((users) => {
            users.forEach((user) => {
                // Add options to select elements    
                const optionTemplate = `<option key=${user._id} value=${user.name}">${user.name}</option>`;
                player1Select.append($(optionTemplate));
                player2Select.append($(optionTemplate));
            });
        });

        const tryEnableMatchButton = (selectObj) => {
            if (player1Select.find(".instruction").length == 0 && player2Select.find(".instruction").length == 0) {
                const startMatchButton = $("#startMatchButton");
                startMatchButton.removeClass("disabled");
                // Allow the button to post the form
                startMatchButton.attr("type", "submit");
            }
        };
    });
</script>